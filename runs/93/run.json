{
  "artifacts": [
    "stochseq_model=GRU_layers=4_hidden=8.pt"
  ],
  "command": "my_main",
  "experiment": {
    "base_dir": "/data/volume_2/ml-pws/experiments",
    "dependencies": [
      "numpy==1.26.3",
      "sacred==0.8.5",
      "src==0.1.0",
      "torch==2.2.0"
    ],
    "mainfile": "01-model-size.py",
    "name": "model-size-sweep",
    "repositories": [
      {
        "commit": "423cf70941833c83a2189f4a99e05f8192301879",
        "dirty": true,
        "url": "git@github.com:manuel-rhdt/ml-pws.git"
      }
    ],
    "sources": [
      [
        "01-model-size.py",
        "_sources/01-model-size_af4e685bf8b30f04fcd5b782569884d6.py"
      ]
    ]
  },
  "heartbeat": "2024-02-12T16:26:10.042130",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Xeon(R) Gold 6226 CPU @ 2.70GHz",
    "gpus": {
      "driver_version": "515.43.04",
      "gpus": [
        {
          "model": "NVIDIA GeForce RTX 2080 Ti",
          "persistence_mode": true,
          "total_memory": 11264
        }
      ]
    },
    "hostname": "jupyternoteboo.data-driveninfo.src.surf-hosted.nl",
    "os": [
      "Linux",
      "Linux-5.4.0-170-generic-x86_64-with-glibc2.31"
    ],
    "python_version": "3.12.1"
  },
  "meta": {
    "command": "my_main",
    "config_updates": {
      "epochs": 500,
      "hidden_size": 8,
      "layers": 4,
      "model": "GRU"
    },
    "named_configs": [],
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--id": null,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [
    [
      "/data/volume_2/ml-pws/data/gaussian_data.pt",
      "runs/_resources/gaussian_data_9c245717ccc76eae8c24740276bb1775.pt"
    ]
  ],
  "result": {
    "py/object": "src.models.rnn_sequence_model.SequenceModel",
    "py/state": {
      "_backward_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_backward_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_buffers": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks_always_called": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks_with_kwargs": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_pre_hooks_with_kwargs": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_is_full_backward_hook": null,
      "_load_state_dict_post_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_load_state_dict_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_modules": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": [
              {
                "py/tuple": [
                  "rnn",
                  {
                    "py/object": "torch.nn.modules.rnn.GRU",
                    "py/state": {
                      "_all_weights": [
                        [
                          "weight_ih_l0",
                          "weight_hh_l0",
                          "bias_ih_l0",
                          "bias_hh_l0"
                        ],
                        [
                          "weight_ih_l1",
                          "weight_hh_l1",
                          "bias_ih_l1",
                          "bias_hh_l1"
                        ],
                        [
                          "weight_ih_l2",
                          "weight_hh_l2",
                          "bias_ih_l2",
                          "bias_hh_l2"
                        ],
                        [
                          "weight_ih_l3",
                          "weight_hh_l3",
                          "bias_ih_l3",
                          "bias_hh_l3"
                        ]
                      ],
                      "_backward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_backward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_buffers": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_flat_weights": [
                        {
                          "py/id": 36
                        },
                        {
                          "py/id": 41
                        },
                        {
                          "py/id": 46
                        },
                        {
                          "py/id": 51
                        },
                        {
                          "py/id": 56
                        },
                        {
                          "py/id": 61
                        },
                        {
                          "py/id": 66
                        },
                        {
                          "py/id": 71
                        },
                        {
                          "py/id": 76
                        },
                        {
                          "py/id": 81
                        },
                        {
                          "py/id": 86
                        },
                        {
                          "py/id": 91
                        },
                        {
                          "py/id": 96
                        },
                        {
                          "py/id": 101
                        },
                        {
                          "py/id": 106
                        },
                        {
                          "py/id": 111
                        }
                      ],
                      "_flat_weights_names": [
                        "weight_ih_l0",
                        "weight_hh_l0",
                        "bias_ih_l0",
                        "bias_hh_l0",
                        "weight_ih_l1",
                        "weight_hh_l1",
                        "bias_ih_l1",
                        "bias_hh_l1",
                        "weight_ih_l2",
                        "weight_hh_l2",
                        "bias_ih_l2",
                        "bias_hh_l2",
                        "weight_ih_l3",
                        "weight_hh_l3",
                        "bias_ih_l3",
                        "bias_hh_l3"
                      ],
                      "_forward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_always_called": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_is_full_backward_hook": null,
                      "_load_state_dict_post_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_load_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_modules": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_non_persistent_buffers_set": {
                        "py/set": []
                      },
                      "_parameters": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": [
                              {
                                "py/tuple": [
                                  "weight_ih_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      2
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      2,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  48,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1392,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1416,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_ih_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  240,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  432,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1440,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1464,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_ih_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  624,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  816,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1488,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "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"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1512,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_ih_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1008,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1200,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1536,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1560,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "_state_dict_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "batch_first": true,
                      "bias": true,
                      "bidirectional": false,
                      "dropout": 0.0,
                      "hidden_size": 8,
                      "input_size": 2,
                      "mode": "GRU",
                      "num_layers": 4,
                      "proj_size": 0,
                      "training": false
                    }
                  }
                ]
              },
              {
                "py/tuple": [
                  "linear",
                  {
                    "py/object": "torch.nn.modules.linear.Linear",
                    "py/state": {
                      "_backward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_backward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_buffers": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_always_called": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_is_full_backward_hook": null,
                      "_load_state_dict_post_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_load_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_modules": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_non_persistent_buffers_set": {
                        "py/set": []
                      },
                      "_parameters": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": [
                              {
                                "py/tuple": [
                                  "weight",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApGbG9hdFN0b3JhZ2UKcQFYCgAAADE3OTYwMDg4ODBxAlgGAAAAY3VkYTowcQNLEk50cQRRLoACXXEAWAoAAAAxNzk2MDA4ODgwcQFhLhIAAAAAAAAAm2ayvt6C8D5sH8C+EqgXP/Ht8z7/j16+gisdv7Be1D7M+so9xF0JPy4mib5Wok+8KdF6PiHoCL9FiRa/2XhzviETjT7T7Ca8"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      2,
                                                      9
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      9,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApGbG9hdFN0b3JhZ2UKcQFYCgAAADE5NjMzMzQwMDBxAlgGAAAAY3VkYTowcQNLAk50cQRRLoACXXEAWAoAAAAxOTYzMzM0MDAwcQFhLgIAAAAAAAAAEb7NPKw+Br8="
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      2
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "_state_dict_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "in_features": 9,
                      "out_features": 2,
                      "training": false
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      "_non_persistent_buffers_set": {
        "py/set": []
      },
      "_parameters": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_state_dict_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_state_dict_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "hidden_size": 8,
      "num_layers": 4,
      "training": false
    }
  },
  "start_time": "2024-02-12T16:24:50.205355",
  "status": "COMPLETED",
  "stop_time": "2024-02-12T16:26:10.040229"
}