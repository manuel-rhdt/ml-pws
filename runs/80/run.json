{
  "artifacts": [
    "stochseq_model=RNN_layers=4_hidden=16.pt"
  ],
  "command": "my_main",
  "experiment": {
    "base_dir": "/data/volume_2/ml-pws/experiments",
    "dependencies": [
      "numpy==1.26.3",
      "sacred==0.8.5",
      "src==0.1.0",
      "torch==2.2.0"
    ],
    "mainfile": "01-model-size.py",
    "name": "model-size-sweep",
    "repositories": [
      {
        "commit": "423cf70941833c83a2189f4a99e05f8192301879",
        "dirty": true,
        "url": "git@github.com:manuel-rhdt/ml-pws.git"
      }
    ],
    "sources": [
      [
        "01-model-size.py",
        "_sources/01-model-size_af4e685bf8b30f04fcd5b782569884d6.py"
      ]
    ]
  },
  "heartbeat": "2024-02-12T15:54:02.897107",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Xeon(R) Gold 6226 CPU @ 2.70GHz",
    "gpus": {
      "driver_version": "515.43.04",
      "gpus": [
        {
          "model": "NVIDIA GeForce RTX 2080 Ti",
          "persistence_mode": true,
          "total_memory": 11264
        }
      ]
    },
    "hostname": "jupyternoteboo.data-driveninfo.src.surf-hosted.nl",
    "os": [
      "Linux",
      "Linux-5.4.0-170-generic-x86_64-with-glibc2.31"
    ],
    "python_version": "3.12.1"
  },
  "meta": {
    "command": "my_main",
    "config_updates": {
      "epochs": 500,
      "hidden_size": 16,
      "layers": 4,
      "model": "RNN"
    },
    "named_configs": [],
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--id": null,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [
    [
      "/data/volume_2/ml-pws/data/gaussian_data.pt",
      "runs/_resources/gaussian_data_9c245717ccc76eae8c24740276bb1775.pt"
    ]
  ],
  "result": {
    "py/object": "src.models.rnn_sequence_model.SequenceModel",
    "py/state": {
      "_backward_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_backward_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_buffers": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks_always_called": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks_with_kwargs": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_pre_hooks_with_kwargs": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_is_full_backward_hook": null,
      "_load_state_dict_post_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_load_state_dict_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_modules": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": [
              {
                "py/tuple": [
                  "rnn",
                  {
                    "py/object": "torch.nn.modules.rnn.RNN",
                    "py/state": {
                      "_all_weights": [
                        [
                          "weight_ih_l0",
                          "weight_hh_l0",
                          "bias_ih_l0",
                          "bias_hh_l0"
                        ],
                        [
                          "weight_ih_l1",
                          "weight_hh_l1",
                          "bias_ih_l1",
                          "bias_hh_l1"
                        ],
                        [
                          "weight_ih_l2",
                          "weight_hh_l2",
                          "bias_ih_l2",
                          "bias_hh_l2"
                        ],
                        [
                          "weight_ih_l3",
                          "weight_hh_l3",
                          "bias_ih_l3",
                          "bias_hh_l3"
                        ]
                      ],
                      "_backward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_backward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_buffers": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_flat_weights": [
                        {
                          "py/id": 36
                        },
                        {
                          "py/id": 41
                        },
                        {
                          "py/id": 46
                        },
                        {
                          "py/id": 51
                        },
                        {
                          "py/id": 56
                        },
                        {
                          "py/id": 61
                        },
                        {
                          "py/id": 66
                        },
                        {
                          "py/id": 71
                        },
                        {
                          "py/id": 76
                        },
                        {
                          "py/id": 81
                        },
                        {
                          "py/id": 86
                        },
                        {
                          "py/id": 91
                        },
                        {
                          "py/id": 96
                        },
                        {
                          "py/id": 101
                        },
                        {
                          "py/id": 106
                        },
                        {
                          "py/id": 111
                        }
                      ],
                      "_flat_weights_names": [
                        "weight_ih_l0",
                        "weight_hh_l0",
                        "bias_ih_l0",
                        "bias_hh_l0",
                        "weight_ih_l1",
                        "weight_hh_l1",
                        "bias_ih_l1",
                        "bias_hh_l1",
                        "weight_ih_l2",
                        "weight_hh_l2",
                        "bias_ih_l2",
                        "bias_hh_l2",
                        "weight_ih_l3",
                        "weight_hh_l3",
                        "bias_ih_l3",
                        "bias_hh_l3"
                      ],
                      "_forward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_always_called": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_is_full_backward_hook": null,
                      "_load_state_dict_post_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_load_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_modules": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_non_persistent_buffers_set": {
                        "py/set": []
                      },
                      "_parameters": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": [
                              {
                                "py/tuple": [
                                  "weight_ih_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      2
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      2,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  32,
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1824,
                                                  {
                                                    "py/tuple": [
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1840,
                                                  {
                                                    "py/tuple": [
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_ih_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  288,
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  544,
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1856,
                                                  {
                                                    "py/tuple": [
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1872,
                                                  {
                                                    "py/tuple": [
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_ih_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  800,
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1056,
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1888,
                                                  {
                                                    "py/tuple": [
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1904,
                                                  {
                                                    "py/tuple": [
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_ih_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1312,
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1568,
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      16,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1920,
                                                  {
                                                    "py/tuple": [
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1936,
                                                  {
                                                    "py/tuple": [
                                                      16
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "_state_dict_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "batch_first": true,
                      "bias": true,
                      "bidirectional": false,
                      "dropout": 0.0,
                      "hidden_size": 16,
                      "input_size": 2,
                      "mode": "RNN_TANH",
                      "nonlinearity": "tanh",
                      "num_layers": 4,
                      "proj_size": 0,
                      "training": false
                    }
                  }
                ]
              },
              {
                "py/tuple": [
                  "linear",
                  {
                    "py/object": "torch.nn.modules.linear.Linear",
                    "py/state": {
                      "_backward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_backward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_buffers": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_always_called": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_is_full_backward_hook": null,
                      "_load_state_dict_post_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_load_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_modules": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_non_persistent_buffers_set": {
                        "py/set": []
                      },
                      "_parameters": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": [
                              {
                                "py/tuple": [
                                  "weight",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApGbG9hdFN0b3JhZ2UKcQFYCgAAADExMTcxNjc4NDBxAlgGAAAAY3VkYTowcQNLIk50cQRRLoACXXEAWAoAAAAxMTE3MTY3ODQwcQFhLiIAAAAAAAAASMu2PvDnu74FGH686BbbvVBVhT76JLO+tuUbPkVWxD6u/aM+fX2GvmFamb2ovbk+X22/viSGTT50R4++mphBvtDfL72Qdb89E5GxPW1ux77SmeK+VbWPPk5IjT2sxrO+bfQ9Pu//Q72otEa9F17SPjqmkj7yYqm9vcuJvTtmzT7n8sY+GRBxuQ=="
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      2,
                                                      17
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      17,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApGbG9hdFN0b3JhZ2UKcQFYCgAAADE3NzgxMzEyNDhxAlgGAAAAY3VkYTowcQNLAk50cQRRLoACXXEAWAoAAAAxNzc4MTMxMjQ4cQFhLgIAAAAAAAAA9290PWQESj0="
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      2
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "_state_dict_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "in_features": 17,
                      "out_features": 2,
                      "training": false
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      "_non_persistent_buffers_set": {
        "py/set": []
      },
      "_parameters": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_state_dict_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_state_dict_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "hidden_size": 16,
      "num_layers": 4,
      "training": false
    }
  },
  "start_time": "2024-02-12T15:52:46.465928",
  "status": "COMPLETED",
  "stop_time": "2024-02-12T15:54:02.894604"
}