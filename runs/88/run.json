{
  "artifacts": [
    "stochseq_model=RNN_layers=1_hidden=80.pt"
  ],
  "command": "my_main",
  "experiment": {
    "base_dir": "/data/volume_2/ml-pws/experiments",
    "dependencies": [
      "numpy==1.26.3",
      "sacred==0.8.5",
      "src==0.1.0",
      "torch==2.2.0"
    ],
    "mainfile": "01-model-size.py",
    "name": "model-size-sweep",
    "repositories": [
      {
        "commit": "423cf70941833c83a2189f4a99e05f8192301879",
        "dirty": true,
        "url": "git@github.com:manuel-rhdt/ml-pws.git"
      }
    ],
    "sources": [
      [
        "01-model-size.py",
        "_sources/01-model-size_af4e685bf8b30f04fcd5b782569884d6.py"
      ]
    ]
  },
  "heartbeat": "2024-02-12T16:11:04.868898",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Xeon(R) Gold 6226 CPU @ 2.70GHz",
    "gpus": {
      "driver_version": "515.43.04",
      "gpus": [
        {
          "model": "NVIDIA GeForce RTX 2080 Ti",
          "persistence_mode": true,
          "total_memory": 11264
        }
      ]
    },
    "hostname": "jupyternoteboo.data-driveninfo.src.surf-hosted.nl",
    "os": [
      "Linux",
      "Linux-5.4.0-170-generic-x86_64-with-glibc2.31"
    ],
    "python_version": "3.12.1"
  },
  "meta": {
    "command": "my_main",
    "config_updates": {
      "epochs": 500,
      "hidden_size": 80,
      "layers": 1,
      "model": "RNN"
    },
    "named_configs": [],
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--id": null,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [
    [
      "/data/volume_2/ml-pws/data/gaussian_data.pt",
      "runs/_resources/gaussian_data_9c245717ccc76eae8c24740276bb1775.pt"
    ]
  ],
  "result": {
    "py/object": "src.models.rnn_sequence_model.SequenceModel",
    "py/state": {
      "_backward_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_backward_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_buffers": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks_always_called": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks_with_kwargs": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_pre_hooks_with_kwargs": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_is_full_backward_hook": null,
      "_load_state_dict_post_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_load_state_dict_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_modules": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": [
              {
                "py/tuple": [
                  "rnn",
                  {
                    "py/object": "torch.nn.modules.rnn.RNN",
                    "py/state": {
                      "_all_weights": [
                        [
                          "weight_ih_l0",
                          "weight_hh_l0",
                          "bias_ih_l0",
                          "bias_hh_l0"
                        ]
                      ],
                      "_backward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_backward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_buffers": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_flat_weights": [
                        {
                          "py/id": 36
                        },
                        {
                          "py/id": 41
                        },
                        {
                          "py/id": 46
                        },
                        {
                          "py/id": 51
                        }
                      ],
                      "_flat_weights_names": [
                        "weight_ih_l0",
                        "weight_hh_l0",
                        "bias_ih_l0",
                        "bias_hh_l0"
                      ],
                      "_forward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_always_called": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_is_full_backward_hook": null,
                      "_load_state_dict_post_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_load_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_modules": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_non_persistent_buffers_set": {
                        "py/set": []
                      },
                      "_parameters": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": [
                              {
                                "py/tuple": [
                                  "weight_ih_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      80,
                                                      2
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      2,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  160,
                                                  {
                                                    "py/tuple": [
                                                      80,
                                                      80
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      80,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  6560,
                                                  {
                                                    "py/tuple": [
                                                      80
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  6640,
                                                  {
                                                    "py/tuple": [
                                                      80
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "_state_dict_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "batch_first": true,
                      "bias": true,
                      "bidirectional": false,
                      "dropout": 0.0,
                      "hidden_size": 80,
                      "input_size": 2,
                      "mode": "RNN_TANH",
                      "nonlinearity": "tanh",
                      "num_layers": 1,
                      "proj_size": 0,
                      "training": false
                    }
                  }
                ]
              },
              {
                "py/tuple": [
                  "linear",
                  {
                    "py/object": "torch.nn.modules.linear.Linear",
                    "py/state": {
                      "_backward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_backward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_buffers": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_always_called": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_is_full_backward_hook": null,
                      "_load_state_dict_post_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_load_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_modules": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_non_persistent_buffers_set": {
                        "py/set": []
                      },
                      "_parameters": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": [
                              {
                                "py/tuple": [
                                  "weight",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApGbG9hdFN0b3JhZ2UKcQFYCQAAADE0Mjg5NDAxNnECWAYAAABjdWRhOjBxA0uiTnRxBFEugAJdcQBYCQAAADE0Mjg5NDAxNnEBYS6iAAAAAAAAAHLlAb4VqDK+IQoePkEgCb41L1i8/icnPqbc3LvdEwS+NNbCvazGAj7LqTa+4AgzPvlwUD2hT8U99GQIvQjaUb37BA4+Emkku7mUTjwF5QK9kb2JPesupT1e8149+0Hpvb2kvr1Sa0k9z6L/vZ0RzDxu1xW+BpfwvQJAfT0FQxS+x+04Pqa5Ob6h9xm9J5bJPR+0Ij6+9RW8go3TvAxZAz4RXgu+2vg3PZHqJz3OtcC8Svx2vWnfHb3etPm9JbInvrVFMDupk3E96YriPU8NoTyX/xY+85ofvmAAI77twbE9UXc6PksEID49F5M9H4OPvcTI3b2n98A9dtdCvgF1Hz0hF8o9t8yRvXAuND4GNJ89DGwSPhvJEb1Ksy0+cEPKvca1CT48/x0+zgQPvh2mTT4n5Fc7suLLPW6bMj4LGty60miTPfcwBj74tTU8hiqFvUxYUT3SO0W+/UkkvjiRJj4GBa09zDILPi+rFz5762w9tOvzvdxmWj2+4zw+QrEPvvoGwD2ZrlA9IvxvPfuFID5uEEU+Ut4gPpqmEr7fRsK9pYeGPcrIPD6w5DI+z5hSO+FrBL6c7hm++ZgBumGtyL1CpMu9Jt1dPfVWtr1LJUi+N10MPlqScj0wmxK+gl7HPO0U2L3RynI9zEUuPXKmyD18Eg0+D1jaPU9tQz6SWwA9FmQYPUabf71Amww+MReuO5m4Er7RE4Y9Dk5WvqhLyr1RBx47oR4kvqZVu72OsxI+6e5rvTFIKL20aBs+1vyiPayURT2UIms9aHA7vS+g1L15HhC+zWgtvHy72T3E0fk9T94aPlkefj043AK+eZXxPYq75jxitTC+jFbwPcfgeDw4deu8f41VPQ=="
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      2,
                                                      81
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      81,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApGbG9hdFN0b3JhZ2UKcQFYCgAAADExODUyNjQ4NDhxAlgGAAAAY3VkYTowcQNLAk50cQRRLoACXXEAWAoAAAAxMTg1MjY0ODQ4cQFhLgIAAAAAAAAAr7CYPT0j7r0="
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      2
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "_state_dict_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "in_features": 81,
                      "out_features": 2,
                      "training": false
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      "_non_persistent_buffers_set": {
        "py/set": []
      },
      "_parameters": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_state_dict_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_state_dict_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "hidden_size": 80,
      "num_layers": 1,
      "training": false
    }
  },
  "start_time": "2024-02-12T16:09:48.835412",
  "status": "COMPLETED",
  "stop_time": "2024-02-12T16:11:04.866436"
}