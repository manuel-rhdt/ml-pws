{
  "artifacts": [
    "stochseq_model=GRU_layers=4_hidden=8.pt"
  ],
  "command": "my_main",
  "experiment": {
    "base_dir": "/data/volume_2/ml-pws/experiments",
    "dependencies": [
      "numpy==1.26.3",
      "sacred==0.8.5",
      "src==0.1.0",
      "torch==2.2.0"
    ],
    "mainfile": "01-model-size.py",
    "name": "model-size-sweep",
    "repositories": [
      {
        "commit": "423cf70941833c83a2189f4a99e05f8192301879",
        "dirty": true,
        "url": "git@github.com:manuel-rhdt/ml-pws.git"
      }
    ],
    "sources": [
      [
        "01-model-size.py",
        "_sources/01-model-size_af4e685bf8b30f04fcd5b782569884d6.py"
      ]
    ]
  },
  "heartbeat": "2024-02-12T15:50:14.682825",
  "host": {
    "ENV": {},
    "cpu": "Intel(R) Xeon(R) Gold 6226 CPU @ 2.70GHz",
    "gpus": {
      "driver_version": "515.43.04",
      "gpus": [
        {
          "model": "NVIDIA GeForce RTX 2080 Ti",
          "persistence_mode": true,
          "total_memory": 11264
        }
      ]
    },
    "hostname": "jupyternoteboo.data-driveninfo.src.surf-hosted.nl",
    "os": [
      "Linux",
      "Linux-5.4.0-170-generic-x86_64-with-glibc2.31"
    ],
    "python_version": "3.12.1"
  },
  "meta": {
    "command": "my_main",
    "config_updates": {
      "epochs": 500,
      "hidden_size": 8,
      "layers": 4,
      "model": "GRU"
    },
    "named_configs": [],
    "options": {
      "--beat-interval": null,
      "--capture": null,
      "--comment": null,
      "--debug": false,
      "--enforce_clean": false,
      "--file_storage": null,
      "--force": false,
      "--help": false,
      "--id": null,
      "--loglevel": null,
      "--mongo_db": null,
      "--name": null,
      "--pdb": false,
      "--print-config": false,
      "--priority": null,
      "--queue": false,
      "--s3": null,
      "--sql": null,
      "--tiny_db": null,
      "--unobserved": false
    }
  },
  "resources": [
    [
      "/data/volume_2/ml-pws/data/gaussian_data.pt",
      "runs/_resources/gaussian_data_9c245717ccc76eae8c24740276bb1775.pt"
    ]
  ],
  "result": {
    "py/object": "src.models.rnn_sequence_model.SequenceModel",
    "py/state": {
      "_backward_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_backward_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_buffers": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks_always_called": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_hooks_with_kwargs": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_forward_pre_hooks_with_kwargs": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_is_full_backward_hook": null,
      "_load_state_dict_post_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_load_state_dict_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_modules": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": [
              {
                "py/tuple": [
                  "rnn",
                  {
                    "py/object": "torch.nn.modules.rnn.GRU",
                    "py/state": {
                      "_all_weights": [
                        [
                          "weight_ih_l0",
                          "weight_hh_l0",
                          "bias_ih_l0",
                          "bias_hh_l0"
                        ],
                        [
                          "weight_ih_l1",
                          "weight_hh_l1",
                          "bias_ih_l1",
                          "bias_hh_l1"
                        ],
                        [
                          "weight_ih_l2",
                          "weight_hh_l2",
                          "bias_ih_l2",
                          "bias_hh_l2"
                        ],
                        [
                          "weight_ih_l3",
                          "weight_hh_l3",
                          "bias_ih_l3",
                          "bias_hh_l3"
                        ]
                      ],
                      "_backward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_backward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_buffers": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_flat_weights": [
                        {
                          "py/id": 36
                        },
                        {
                          "py/id": 41
                        },
                        {
                          "py/id": 46
                        },
                        {
                          "py/id": 51
                        },
                        {
                          "py/id": 56
                        },
                        {
                          "py/id": 61
                        },
                        {
                          "py/id": 66
                        },
                        {
                          "py/id": 71
                        },
                        {
                          "py/id": 76
                        },
                        {
                          "py/id": 81
                        },
                        {
                          "py/id": 86
                        },
                        {
                          "py/id": 91
                        },
                        {
                          "py/id": 96
                        },
                        {
                          "py/id": 101
                        },
                        {
                          "py/id": 106
                        },
                        {
                          "py/id": 111
                        }
                      ],
                      "_flat_weights_names": [
                        "weight_ih_l0",
                        "weight_hh_l0",
                        "bias_ih_l0",
                        "bias_hh_l0",
                        "weight_ih_l1",
                        "weight_hh_l1",
                        "bias_ih_l1",
                        "bias_hh_l1",
                        "weight_ih_l2",
                        "weight_hh_l2",
                        "bias_ih_l2",
                        "bias_hh_l2",
                        "weight_ih_l3",
                        "weight_hh_l3",
                        "bias_ih_l3",
                        "bias_hh_l3"
                      ],
                      "_forward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_always_called": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_is_full_backward_hook": null,
                      "_load_state_dict_post_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_load_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_modules": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_non_persistent_buffers_set": {
                        "py/set": []
                      },
                      "_parameters": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": [
                              {
                                "py/tuple": [
                                  "weight_ih_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      2
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      2,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  48,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1392,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l0",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1416,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_ih_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  240,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  432,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1440,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l1",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApGbG9hdFN0b3JhZ2UKcQFYCgAAADE3NjkwOTAzMDRxAlgGAAAAY3VkYTowcQNNMAZOdHEEUS6AAl1xAFgKAAAAMTc2OTA5MDMwNHEBYS4wBgAAAAAAAG/0qz5YXFU+uMSFPrsPaT4W0fw9XmzXvuM+nr7Kobw+nzO+vcUFTj3Ux3y+oZgevsZIUz4cqte+NG+gPmzT67xrdQ4+70dDvtCPKD60S0y9BOQcvGpkez3ySJu+Km81PzTBPj4B7Mm9MBAcvuBbhz6/bUW+g9OgPkk04r4D5nw9AmxzPp01w75Wpnw+fh7Kvmxiz735wAe+ziBFvTXh2j4+51w+2nO8Pg3bkz7Gctm+0hIGPinsij1AKBg9x2dJPv6Nsb4hAPq+mGyivr/15z3APAu+GAh9vtWWeT3hnAO+f2MXvOWlCz0QAfA9+0XGPHjHkr7CILS+dTGMPZ3sxL3lSYg+ynsZvfReXT4LtkY8QJsLPpwxSb4SXZk+s2HoPk9cIj4amLU9dFDXPi3oib5bqAU8p1nZPipmVD6A9ak+9cL6vRZlXz5kk3O+M34lPWlNFT288PM96c88PrPUpD7kU/49GKNIvu5grb7CTLa+j49Lvnm83j1dl8E+Nez3PWBvnr7X/Nu+vh6jvijzvruxa+C8S6QSvgnIcb1AKWs83TaQPrIihT38aEI+YqAlvndgED5pX6c+ELU7vffhlD1fa5W8y0zZPVZ2pr38KSe+r4Q2vjMPDD/3DDi+giqxvrhOXL6maDC/oJUav7Ukvb4KFNE+4N0qPzqyBL/X+/C+loI6Psz9Eb5b2Ya92Lc6PbhAELzU9Kg+f64Mv/jJkjm5qF67vowov9zXD7+KvjK+fUsDP8i1a7qN9f49AxwOvyaVXr4Ysg2+yL+Gvv1KRr57oFY++hpPvg3l177moBe+mlkiv8Q4J7/0ZwS/C7MKv66Ziz6GACi9B9i+vuu5iL71MJ2+HWoNv+nZbL6mR1A+JLSDPlOtXD0QQJA8vJkwvnfoEL+YdxG/wIWVvU8coT1mV08/iALhvuTPFz38TRy+WsSdvaHMSD4PNR8+gsWVvYMJjj43wie9zqGnPd1PlD4ms9u+FZyfvsIVLL2LEsY9AuElvk52RbyH1TM+T5ncPifZwr36G4o+t+5JvtdASj6kiuM9XWHRPLI8ab4b6uM+3UsuPlLQSz5DqgI+XcBavu7LVz2CcfO8cFXRPTjFoL3oUE8+6BklPuMIlrw+dQY8smu/vvP+r72Nzt6+/N/LvF57zb7F2K++HE81Pf+C0j6PG9o8YOGCPfU9uL7Fsiw+mYE0Pa0kRj7C5EG+RoPMPRIyQj6hJn0+c1uqvPh9gz0iIw2++7UAvQFoML3Wfnk6Uxe9Pi6Br756Vh49BJbsPrde9r21TvU965OHPUNuYb6faaI8v3nuvn1Ulj7R/eG9daLWPrfjiT18rmy9Msd5PctJXr7uF5k9wrzsPUcdTbyzzpy+lidivkuTxD1dDpY9bbCQPG+9GL5wn/o8DvkAPTUiCD4r364+grUDu2M7sr596sK+JsbYPioxQz6hVQy9GYy0PntcjD7YGp49AEJvvhrcgr62NgW+8pVRvsa5OD60xg4/QzrqPcRKyj2z9Hm+QCUAvz04vz5dCnO+f5Q4Pi30Pz33CRW/xM6CPuwo7T6ep8c+5gYrv77A4D7AWco+LiGdPQnyZT0nnui9uiMFP4sGDj/Qote+aaucPCw8AT48ISs9c3nbvlscxL4yQO2+wIigvYmvVz3sGJC+1Ki4vmRpNr5Emxe9tVvCvTCHjT1rVqg9ROcTPiMQCr96jmy8PMcCv6UJC7/ulhI97KdEvmxMTb5kr6u+e3wav1gwbL3vaV+9nM7ZvrcWv7z/yIC7whf3PTIzyT5MQSG/MCoWvxnm3L7le5S+9eTgvR8EkL2pQJe9NX7xPvKWGr6UrJG9hesJvv867rxWgPe+f4Q4v78ZWj6NTKU+jhi1ve5MCr5zDoS+csZPvbU+nr0bgRQ+/0W/Ph/dLj/3FbO+c6bRvmliBb/tEQG/PYQ2vmorEj6TibQ8lcH9vhI+KL6xEcC+KmvpPvOUUj7iqbG79eM2vqYkkb4ghre9M4uyvqNmKz7Bo6M9tEnKPvFXwj7S/gC+fyquvYIa0T7N5va9VsGKvurq37wG9wg/rjO3Pv6nVr7DOSo+kgv3PjjbAL6mcBG+6qwIP1HXqj7nnZ4+rm//PTMZ3L74hJA9+vTdveflPb4rvj0+/F24PuALzj5aoI29ZObKvhuNUz4Y3DS9PPRgvW+B2r07sBg/aKEQP7yKRr4xWgu+nY6HPaZrEr4quBY9J12GPox20z38Qoy+4TgGPvuHTDyprRm+TrGBPoFlaT7arrA9Sjx3vEsVKr5Hyg2/YnDbvn1ZBz4/xRi9ovEBv8WkpD4YfYi+pLyLvtsQTL29woW++lbpvWcuh77xWKm+PYkEPlSszr4Icyc+dmikvdTiK77y4r8+aULGPl6KU74JzXi+YZ3lPeSdo76Zk9A8w0qhPn8XkLzuzB2+rFdgPr8Gkbz7lI2+3i5uPWJ+3L5NmI2+MqL4vU/X9D0oSYw+Ni0KPaDkWL6V4KG9gLqqPiDgoLvxbOM+uTDjvSVEkr6EC1g+Z2MOvuVC2r42I4g9RO+nPoDlW74/yHU+og5ePluskT7uiCG9L/+avvOBqj5hu8A+LMoFPkTm2r0Oikw8YiTbO8AzZL0dP6a+Nn+3Pqr5jj6tH/09KgWyvZibaL4xX9m+fAr/PYTBfD67jBy+j5RMPCw4ob6SLoS+2FkDP+5p+b6ImZe+cMwIP5KMor5L+S29V0aovnqrXr17I5o+iVq5vTv1DL9ItQI/qKTnvsO6IL80z6y+50EhvhVbEz9d0z2+4WmQPruEiT4fmM49YpyqvtR48b61d9G75NcNPr24o71N6SQ/ysSmPb/hkT5Y3uG+a4TYvtFRSr42q+s+W4ACvjlF1T5Iv70+oTBBvrUfzL6TDgu/aSd6vncmhj5xPCG/RenEPikdyD6/Xpa9szwTv2UU276BJgi/bUJIP6adw76WbKO9J8PSPevNBr5viti+hKPGvveS2r7DBUc9fp+PPuuGMLyh3tW+mAtBPXGyjr6J9x89lfRmvlTfmbw8GfA96GZdPhw8Hb7G3s2+gLqyvugjpbx5z3Q+tI1aviq6Vj6w5nS+WudEPgJTn75x000+MFwtPKpjsb2Rw5c+mNLKvtabqD2H3Fo9TRVJvswJRr6E+Qk+fZ6yPrXfpj2tIlW9deCsvi9M4r7qYTi+HgMOvgVe5D1DhIE+CltdvtwlwDwUQC+9l55nviNooL7Y52S+GmqgPqx5GT7EFUE+6IQnvdB/mj6hyeu+d2UHPHQW+71IU6I+2/XRPgFZtL07iHO+3KisvrZfdTxPWh2+kHjYvnmdob4pEtA8ys2dPgPjhD6FsIE+sSmJPXY1sTtMrCO9UwmxvGtLCT40MX8+mLaJPvWgDj8bc6A+NY/8PrMJVj6y5k4+a+cLvbVYrT6l30+9bJmlvdxyxr2CEZi9o4UXvk19ZL4hL4a+FtMYvq+4Jr3VZ6s+j+zIPq8Ajj76QJ2+EKkOPg/glL5QB+O9senSPmD4hT7S5Ms92U0XP6Z9LD7XMNY+oZiyPgHLgb6eAEK98ZXjvUApsz5MxZ8+hanzPl/Kwz4moUS+mFJpvsYnEL8fc7Y7oXnEPfdugr6634S8FJMBvlV9ir7IotM+VDZEPj6Nfj4KMx2+GoPRvunwaT5ijSg+3y9HPs89ib5vUEc+5RwdP+/pnz3knpc+VpLyvhNiOb4pC1K+KPPhPF7pE76A6Ie9PmSDPQ1AqL7/vR+9vFi5PFlMU76PuLM+LLUGv2IkAL+uCP0+8OVUvo/Smr441p2+RDt3vtG1kD5v4po8wp/Svk4JXz3y2ds8pXSovUx5CD3L64++b+24Pj2jOD7lhjk/cXkLPx6JgD51ueo88jWEvsfIEr5es4g9yTVpvnzbjT30swE/cfHgPn08qL0aIMe+cHYOv0mrjD6u7BW/yHASvrRY4D5TnBC/CzkOvul8XTwk6xa/upUhPyQMH79UvPG9opk2uy9u2L3S4z++r7vIvuua1L4fx5g+Ki1Nvh7Uv77RgnW+5FAbvyhD0b7Neem+PyPLvsBE7D2lxa4+98IAPzvCgD4xWes+VRubvdN4Kr77QLW+SzwdPgvIyr65KRa/Enr2vkhc+72dSoa+Z2C4vcm2iT6DsIC9l62RPRK39D5PWco+mJi8Ph5RuL5EiXA+jyiOPIu88j58phI/tG2xPmB2xL7C9Ou9+yYLPxM8nD4eeiW+3lyUPejvGr8dBBq+0SCHvna+H7+hoxO/1g4ovof7sr7Jwzw+tQPRvhL3or5LAWu+4T3XvvE/xb5bpKm+xOIEvu8tDr90VNC+fuCHvoiiwr2vgDa+cuaxPPWASr66+l0+5oChvpFxbD5q4Em+l/GPPcyuRj336mk+NmPDvj0jsbrM9sm8hmONvc1d1D1e264+MUkwPvFvALx8frS+6PLLPH7IX74K1qu+XBdLPoBsj757QbI+uzpGPhQjC77WZAE+kayAviDtSb4Zzus9P07eu1VQuj65ngU+l3aEPNJjDb5rxtG9Z+GKPZTd4z6NWQw+vbFDPmVfhz5P/bC+oso6PWYUrD493kA+3MOGvnhU2D1JCKK+KySQvu5Ic7yv26g+5UiAvkS7XT5HZkE81xEyPRyjuj4/pOW+saaIPXwVB76qT+S9ep7hPVApZD5SDUw9Kc3dvf7kab67Voo92QIDPmU8RT1WJaQ+AryoPiNgtb6J1gc/np6SvhmwuT7g2Te/sisXvzQJ8T4HPnO+MR4xvi9c5z4NFCq/7f6wPpIQlz2+7+O+wKFtPoecBr/87z2+GAbFPVUI+L4IpF4+J8XUvGsi1rxSPKg9ZnW/vlf7Wj4npVi+nbvPvtAOIT+Tp+c9O803vhTGAD8S4TY/8/xJvoFezz4aKyC/xSYbPxRSQr+gloa+LgsFP4hM2j7rQMa+/6sdP/hhO76bCBs/0XNzvr5QBr9VAxo/0hOePvkdGb5DqOK8xdcvvp5UGz5Rhys9SLDlvkIqlz5YCOi+s1kZvqbExDzFr4W+rPIQP69Sez27f8G+IkNNvmf8YL7KOcI92XK8vhEvzbw3Fiq8cskIvrCeU76nEK++LtWpviQu1z5bpw++O9y9PpxM+j3NwHg+S36lveg4ab0J2IK+BRKPvRjl0L7Z9qM+Zg5nPOybAj45aJo+poR3vtW4jz76X5s+j9l+Pkz90TwzIWk9qX40vKREgD7ENSC+88DRvZcThr7oZoG+GXvtPi+S2L3bhjI+1BmcvbSdPD5uwT0+yvvivZjlnL7qDs2+ynTfvODVij7T1oG+XVSrvRP6Qz3HQy4+ikcSPkM/1L3SDHQ+BXq6vI/WVz7t+Y6++TEjPMkiZD5xIZ++NNUNPp1/lD5EB52+oB+kPkb82b6qMZu8MFnFPbF8Jb+r62A+kFuBvRLl4LuMZ7E9LDGavhWCxj5DT8u+nqDAPRfdyL3bumq9N2hkvUYN1772nmu+oft4PnBMQD7pgtu71oWlPiuY3b7GSAq+VL/cPkBt9r2FDoQ7iVkBPrgz4TuIawU/UwwcvlAcyb7zjGW9fAuGPLGXh73CeqY+RmapvnRcoz4qvPO+iiTcvkrPtbzRlTs+0fcOvw2fAD6g2Iw9+r83Pf+kD75uy44+nQViPowQpr1xuPg9EumrPk1shz2F/4U8gTMvPlXRUT4N3KK9I9SQvuX1aj68TO29xZDqPsBC9r2jcY2+fsbqvki4LL6++XW9nI6fvkhVtb75ZTo+NOE2vaqbvj73tou64tzMvoCzEj9JMzM+BbWhvSmCgD5jyyK/5+koP1wuEr8QDCm/K1EVP8OQ1D7/a/q+PHZmPiJcA74tUNw+enugOqcqNL4P/VE97o04PgVXu77gUXQ+tLcOv+ud/z3P15m9unUJv74X0L37myU+LHhlvn94dDwR2WS+NjuNPo3wCz7P0Ja+GhGYPnqPIzt9VV88hMiJPqoPD7+yreA+6m5CPpfPk762D80+9aRQvrFD+70R57U+sQ+ovdJvNj45mCk/U6cVvy/gZj7d+Ly9LGPIvpD2Dj/QIFG+vigjPhIGGL66dI2+1QU8PujRmT7KNN2+aLrsPoUAuL6a57M+2JYhPCHfXr1OeQG/DALjPsI2i76UuZA+dotMPsYC776tuxe+uYA2vU5fNL3SQmy8ZM+CvkfeF77h16k+MX2VvlFt3L2pxi4+gYKGPZBojD7BSRi+95mWPplMhD1hobq+cWBkviZHQL6hsfa+ndJQPqSdcz1YUw6+HVeyPk3gx75MwTm+GfLePYodej5RTAy/LjEBP+oLdL7Aoh4+r3RKPhGEBD8VMFw+X7duPGa8vb40vdE+LlgUv7sD0r0S9mW+5SC+vWiIjD4bOso+TRi8vgbxkT6H9ic9jG+vvjEtrT77rgA/veKsPRakIr5KQUi+RNvnvKW5Ir5yUa8931vFPZ1Rij7yYIq+kOLAvpQxDTzl9Yi+OyGePR64t70K1oC+WLOtOXKEMr2jEAa/SDazPsSdoT0rvdG+hTwIPnDy1b61uq697riDvv3TIb7zv7I8ybtuvZdQXD77Ry0+vJeBPbAuJ74YDui9425CvrKlAz5EJZE+OgyBvlhG5j4Y+ow+8gwmPSEOMr7keum7FiaPvb7u870MnQc+t4CYut/4Ab5oBky9qHiEvmmzPL4lgos+YNkcPnm2Ej0f/bU+UZtvu3GD5L2QfgC+lq+tPvejir6KgaY+r/Rsvsc/tb7A0qA8apwlvt1lNT6URgM/lrUXv0Es3b4tCKs+5/UUv++AjD0Fvpi9xQWyPVrXST3suge/ta0JvTG+/z0tdjC/r+/svjQIaD0nLsu+0YAaP27EZb5KGb2+kqXVPj1Tub7DWYq93rDBvpeYu70H1aA+EN3OvmQyS71cSiu9gKAdv3iJUb75GQ2/UeX0PvC23T6pzA2/upf9vhaOyD5+uAS+sxbuvvy/+L5Pehe/VO7IPtoAKr1oruq8FAv+vbIMg74zYMk+F9ArvhnG4z5b/AA/d3w7vyBSsr0xKSK9FPD7vluo5D5eLhi/xOiIPlaUnT7UIPi+GDEnvVWJIz/Cz8K96r/iO/ueFb9PWIU+hsaxPhVFib6ebZq+2uGWvf0EEr9oCwI+apqhvo/wsj5tyvy9jEcLPXoPRD6hqwG9zRXsvcPaEr6NUys9zWlBvjpsEb9He3M6U2lXPpszdL7fZLc+wZC3vm1kzj0rZgA8W7hZvnM0w7y7B7E+aVbpPjSqDT2yccm9EpN4vk+wBr6I3QO/9z7qPvOZVj4O6XG9q9GjPDFJYTnvtbM+s9GDvfgopb6hgCM+3K/hPsFmEL4GuYc+31B9PU3KWz53iEK95uz5vsWDTj41PSG+4d+GvfZnPj71baA+zAaqPm3m9D3S46k+oWiNvVPxyT0kbYY+jPRcvdTXX742aBs7/xNoPjXDWL7WsKc+jv5VvV+Htj7+3Xy9hJadvfaIkb4P3tO8icuIvg2Irr7KBi2+wQuRPEO+/r7HLtK+Z4Abv6V7377Hjbk+zMdKPuTw1T3N1no+Ipc0vZ0IkL77fOc+AfUCP+wYnD2m1Ag/pDKlvTGry70Kzns9iJIXPpNaLD40L/w+Kk4CPUVZC79dj5S+HaPgPUX32b7JFKO9UafsvuEPtL7B9DC9XfTAvfPFLb3h7Og+ECn3vUsW5j3w4BS+OJMGP/3UWj57bw6+3ziRvTTsZr7ldYG+zX4KPpKUfD7MY8s+57VovuYO9Lpsvom+kVAbvsl7kr1aZgy///imvuSoGb8Ew8I9xXqxvVLp2770D0u95UzZPbW8uj5HPEk+0hm4vPLwaj6LAD4+QBKlPpfAeT7jmRc+XfPHPZVyzj69cpU+TlFRvdGgl7vYfuW+i2sov6wtzL4+dwa/Y0l8Plr2D742T8u97mDTve6yYr6I/Lg+KufkPt52nz4nDis+T+i6vtFidb04RY++PiSLPgKy8T07lxW+ZfKCvt1LDr7/tZy9hlELv120KbrFPg8+uF2+vtxJSzy2poS7WWDBvioGwL3s1W2+DjmSupYgGz4GoaW+qDwoPn5QwbzqGE8+KsunPgsI2j7+qGu+a2I7Pt4VRzzK8XQ+JNpwPtPeST7xn3q9hLuHvkYXvr4arUm+WiC1vU5sCj4wNQe/ZHQdv1zECTxCUZO+aQmJPj10qL3KBFM+jVK6Pk+Y2Txr8HM+uZ5HvXv/RD4JsMg+h8jQPqhOfT1AsrU+tPeRPZt43j4HRpg+gpxyPmDkL7+3tyC+aPQMPdsOK74il8s8jj8kvj+/Hb9wUgu+80MIPR6CJ708uy++Su6mO/m/Kb5opAs+AQN8PhdS271UMXq+aJgZPz99cD5g0C8+KSBavlxR6D7bIDo+L/yXvmjH8r76+wk+sr6RvmSYMz5w7Gm9crXZPZ9Oqb4/DOu91wr5PltdtDxShDI+k7ATPp+Skb42eoK+0FK3vQ=="
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1464,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_ih_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  624,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  816,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1488,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l2",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1512,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_ih_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1008,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "weight_hh_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1200,
                                                  {
                                                    "py/tuple": [
                                                      24,
                                                      8
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      8,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_ih_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1536,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias_hh_l3",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": ""
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  1560,
                                                  {
                                                    "py/tuple": [
                                                      24
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "_state_dict_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "batch_first": true,
                      "bias": true,
                      "bidirectional": false,
                      "dropout": 0.0,
                      "hidden_size": 8,
                      "input_size": 2,
                      "mode": "GRU",
                      "num_layers": 4,
                      "proj_size": 0,
                      "training": false
                    }
                  }
                ]
              },
              {
                "py/tuple": [
                  "linear",
                  {
                    "py/object": "torch.nn.modules.linear.Linear",
                    "py/state": {
                      "_backward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_backward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_buffers": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_always_called": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_forward_pre_hooks_with_kwargs": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_is_full_backward_hook": null,
                      "_load_state_dict_post_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_load_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_modules": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_non_persistent_buffers_set": {
                        "py/set": []
                      },
                      "_parameters": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": [
                              {
                                "py/tuple": [
                                  "weight",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApGbG9hdFN0b3JhZ2UKcQFYCgAAADExMjEwMzU5NjhxAlgGAAAAY3VkYTowcQNLEk50cQRRLoACXXEAWAoAAAAxMTIxMDM1OTY4cQFhLhIAAAAAAAAA6rK7PCaTEr+qMSm+WbwQvxWlX77e/ic/gLStPrRJBj8qCoc+1cjuPkSLkb39yd2+aRGfvPIkE7+O1he+B+3avqRhFD28HBu8"
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      2,
                                                      9
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      9,
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              },
                              {
                                "py/tuple": [
                                  "bias",
                                  {
                                    "py/reduce": [
                                      {
                                        "py/function": "torch._utils._rebuild_parameter"
                                      },
                                      {
                                        "py/tuple": [
                                          {
                                            "py/reduce": [
                                              {
                                                "py/function": "torch._utils._rebuild_tensor_v2"
                                              },
                                              {
                                                "py/tuple": [
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/function": "torch.storage._load_from_bytes"
                                                      },
                                                      {
                                                        "py/tuple": [
                                                          {
                                                            "py/b64": "gAKKCmz8nEb5IGqoUBkugAJN6QMugAJ9cQAoWBAAAABwcm90b2NvbF92ZXJzaW9ucQFN6QNYDQAAAGxpdHRsZV9lbmRpYW5xAohYCgAAAHR5cGVfc2l6ZXNxA31xBChYBQAAAHNob3J0cQVLAlgDAAAAaW50cQZLBFgEAAAAbG9uZ3EHSwR1dS6AAihYBwAAAHN0b3JhZ2VxAGN0b3JjaApGbG9hdFN0b3JhZ2UKcQFYCgAAADExMjUyODc1MzZxAlgGAAAAY3VkYTowcQNLAk50cQRRLoACXXEAWAoAAAAxMTI1Mjg3NTM2cQFhLgIAAAAAAAAAV1MqPkF71L4="
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  0,
                                                  {
                                                    "py/tuple": [
                                                      2
                                                    ]
                                                  },
                                                  {
                                                    "py/tuple": [
                                                      1
                                                    ]
                                                  },
                                                  false,
                                                  {
                                                    "py/reduce": [
                                                      {
                                                        "py/type": "collections.OrderedDict"
                                                      },
                                                      {
                                                        "py/tuple": []
                                                      },
                                                      null,
                                                      null,
                                                      {
                                                        "py/tuple": []
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          true,
                                          {
                                            "py/reduce": [
                                              {
                                                "py/type": "collections.OrderedDict"
                                              },
                                              {
                                                "py/tuple": []
                                              },
                                              null,
                                              null,
                                              {
                                                "py/tuple": []
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      "_state_dict_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "_state_dict_pre_hooks": {
                        "py/reduce": [
                          {
                            "py/type": "collections.OrderedDict"
                          },
                          {
                            "py/tuple": []
                          },
                          null,
                          null,
                          {
                            "py/tuple": []
                          }
                        ]
                      },
                      "in_features": 9,
                      "out_features": 2,
                      "training": false
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      "_non_persistent_buffers_set": {
        "py/set": []
      },
      "_parameters": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_state_dict_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "_state_dict_pre_hooks": {
        "py/reduce": [
          {
            "py/type": "collections.OrderedDict"
          },
          {
            "py/tuple": []
          },
          null,
          null,
          {
            "py/tuple": []
          }
        ]
      },
      "hidden_size": 8,
      "num_layers": 4,
      "training": false
    }
  },
  "start_time": "2024-02-12T15:48:50.144917",
  "status": "COMPLETED",
  "stop_time": "2024-02-12T15:50:14.680851"
}